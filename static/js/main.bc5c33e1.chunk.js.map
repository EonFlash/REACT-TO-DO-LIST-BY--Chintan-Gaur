{"version":3,"sources":["components/CreateItems.js","components/Item.js","components/ItemList.js","components/GlobalStyles.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["StlyedCreateItem","styled","div","CreateItems","inputText","items","setInputText","setItems","onSubmit","e","preventDefault","value","onChange","console","log","target","type","placeholder","StyledItem","Item","item","className","onClick","filter","i","ItemList","map","GlobalStyle","createGlobalStyle","App","useState","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qMAqCMA,EAAmBC,IAAOC,IAAV,wjBAoCPC,EAnEK,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAarD,OACE,eAACP,EAAD,WACE,wCACQ,wCAAkB,OAE1B,uBAAMQ,SAXW,SAACC,GACpBA,EAAEC,iBACFH,EAAS,GAAD,mBAAKF,GAAL,CAAYD,KACpBE,EAAa,KAQX,UACE,uBACEK,MAAOP,EACPQ,SAlBa,SAACH,GACpBI,QAAQC,IAAIL,EAAEM,OAAOJ,OACrBL,EAAaG,EAAEM,OAAOJ,QAiBhBK,KAAK,OACLC,YAAY,oBAEd,qDCbFC,EAAajB,IAAOC,IAAV,oUAoBDiB,EAnCF,SAAC,GAAyC,EAAvCf,UAAwC,IAA7BgB,EAA4B,EAA5BA,KAAMf,EAAsB,EAAtBA,MAAOE,EAAe,EAAfA,SAKtC,OACE,cAACW,EAAD,UACE,sBAAKG,UAAU,YAAf,UACE,qCAAQD,KACR,wBAAQE,QARK,WACjBf,EAASF,EAAMkB,QAAO,SAACC,GAAD,OAAOA,GAAKJ,OAO9B,0BCEOK,EAVE,SAAC,GAAmC,EAAjCrB,UAAkC,IAAvBC,EAAsB,EAAtBA,MAAOE,EAAe,EAAfA,SACpC,OACE,8BACGF,EAAMqB,KAAI,SAACN,GAAD,OACT,cAAC,EAAD,CAAMA,KAAMA,EAAMf,MAAOA,EAAOE,SAAUA,UCkCnCoB,EAxCKC,YAAH,wcC8BFC,MAtBf,WAEE,MAAkCC,mBAAS,IAA3C,mBAAO1B,EAAP,KAAkBE,EAAlB,KAGA,EAA0BwB,mBAAS,IAAnC,mBAAOzB,EAAP,KAAcE,EAAd,KAEA,OACE,sBAAKc,UAAU,MAAf,UACE,cAAC,EAAD,IAEA,cAAC,EAAD,CACEf,aAAcA,EACdF,UAAWA,EACXC,MAAOA,EACPE,SAAUA,IAEZ,cAAC,EAAD,CAAUH,UAAWA,EAAWC,MAAOA,EAAOE,SAAUA,QCf1CwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN3C,QAAQ2C,MAAMA,EAAMC,YE/G5BrB,M","file":"static/js/main.bc5c33e1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useState } from \"react\";\r\n\r\n//materialui\r\n\r\nconst CreateItems = ({ inputText, items, setInputText, setItems }) => {\r\n  //Handlers\r\n\r\n  const inputHandler = (e) => {\r\n    console.log(e.target.value);\r\n    setInputText(e.target.value);\r\n  };\r\n  const itemsHandler = (e) => {\r\n    e.preventDefault();\r\n    setItems([...items, inputText]);\r\n    setInputText(\"\");\r\n  };\r\n\r\n  return (\r\n    <StlyedCreateItem>\r\n      <h1>\r\n        TO DO <span>LIST</span>{\" \"}\r\n      </h1>\r\n      <form onSubmit={itemsHandler}>\r\n        <input\r\n          value={inputText}\r\n          onChange={inputHandler}\r\n          type=\"text\"\r\n          placeholder=\"ENTER LIST ITEM\"\r\n        />\r\n        <button>Add Item</button>\r\n      </form>\r\n    </StlyedCreateItem>\r\n  );\r\n};\r\n\r\nconst StlyedCreateItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 50vh;\r\n  form {\r\n    margin-top: 3rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 30%;\r\n  }\r\n  input {\r\n    padding: 1rem;\r\n    text-transform: capitalize;\r\n  }\r\n\r\n  button {\r\n    margin-top: 2rem;\r\n    transition: all 0.5s ease;\r\n\r\n    &:hover {\r\n      background-color: #50cb93;\r\n      color: white;\r\n    }\r\n  }\r\n  h1 {\r\n    font-size: 5rem;\r\n    font-weight: lighter;\r\n  }\r\n\r\n  span {\r\n    color: #50cb93;\r\n  }\r\n`;\r\n\r\nexport default CreateItems;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Item = ({ inputText, item, items, setItems }) => {\r\n  const deleteItem = () => {\r\n    setItems(items.filter((i) => i != item));\r\n  };\r\n\r\n  return (\r\n    <StyledItem>\r\n      <div className=\"container\">\r\n        <h2>=> {item}</h2>\r\n        <button onClick={deleteItem}>Delete</button>\r\n      </div>\r\n    </StyledItem>\r\n  );\r\n};\r\n\r\nconst StyledItem = styled.div`\r\n  margin-left: 35%;\r\n  margin-top: 1rem;\r\n  h2 {\r\n    color: white;\r\n    font-size: 2rem;\r\n    font-family: \"Yomogi\", cursive;\r\n    text-transform: capitalize;\r\n  }\r\n\r\n  button {\r\n    transition: all 0.5s ease;\r\n\r\n    &:hover {\r\n      background-color: #50cb93;\r\n      color: white;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Item;\r\n","import React from \"react\";\r\n\r\nimport Item from \"./Item\";\r\n\r\nconst ItemList = ({ inputText, items, setItems }) => {\r\n  return (\r\n    <div>\r\n      {items.map((item) => (\r\n        <Item item={item} items={items} setItems={setItems} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemList;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: 0;\r\n    \r\n}\r\n\r\nbody{\r\n    \r\n    \r\n    \r\n    background: #0F044C;\r\n}\r\n\r\nh1{\r\n    font-family: 'Yomogi', cursive;\r\n    color: #787A91;\r\n    \r\n}\r\n\r\nbutton{\r\n\r\n    font-family: 'Yomogi', cursive;\r\n    font-size: 1.5 rem;\r\n    font-weight: bold;\r\n    padding: .7rem;\r\n    cursor: pointer;\r\n    color: white;\r\n    background: transparent;\r\n    border-radius: 2rem;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\nimport { useState } from \"react\";\n\n//components\nimport CreateItems from \"./components/CreateItems\";\nimport ItemList from \"./components/ItemList\";\n\n//GlobalStyles\nimport GlobalStyle from \"./components/GlobalStyles\";\n\nfunction App() {\n  //States(Uplifted)\n  const [inputText, setInputText] = useState(\"\");\n\n  //States\n  const [items, setItems] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n\n      <CreateItems\n        setInputText={setInputText}\n        inputText={inputText}\n        items={items}\n        setItems={setItems}\n      />\n      <ItemList inputText={inputText} items={items} setItems={setItems} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}